include tinclasses.ew
include eumodbus.e as modbus
include translate.e

object modregs={1,2,3,4,5,6,7,8,9,0}
object modregs_old=modregs

forward procedure showsetup()
forward procedure icons8()
forward procedure setslave()
forward procedure start_connect()
forward function get_integer(atom handle)
forward procedure get_dataregister()
forward procedure getports()
forward procedure display_values ()
forward procedure goodbye()
forward procedure toggle_led()
forward procedure update()
atom ACTIVE = False
atom ctx = 0

enum red=7,green=8,blue=9,yellow=10
enum poti=3,ldr=4
enum butt1=5,butt2=6

atom pollintervall=200
atom updateintervall=500
atom BitRate=9600
atom ErrCount=0
atom MaxErrCount=5
atom ErrCountSum=0
atom TotalCount=0
object comports={}
atom bullshit=#DEADBEEF
--object modregs={1,2,3,4,5,6,7,8,9,0}


-- load resources
--UseTransparentPics=True
atom connected=LoadIco("usb-connected.ico")
atom disconnected=LoadIco("usb-not-connected.ico")
atom font_lucida12 = NewFont("Lucida Sans", 12, False,False,False)
atom font_lucida10 = NewFont("Lucida Sans", 10, False,False,False)
atom font_fn_default=FN_DEFAULT
FN_DEFAULT=font_lucida12
atom ledoff=LoadPic("icon_off.bmp")
atom ledblue=LoadPic("icon_blue.bmp")
atom ledred=LoadPic("icon_red.bmp")
atom ledgreen=LoadPic("icon_green.bmp")
atom ledyellow=LoadPic("icon_yellow.bmp")
atom button_on=LoadPic("button_on.bmp")
atom button_off=LoadPic("button_off.bmp")

--{}=create_thread(getports)
-- create the App with the main Window
Tapp myApp=new({"ArduLink "})
myApp.width=900
myApp.height=330
myApp.xpos=ScreenWidth()/2 -450
myApp.ypos=ScreenHeight()/2 -150
myApp.exitrid=goodbye
myApp.exit_title=xlt("Beenden")
myApp.exit_text=xlt("Sind sie sicher?")

-- create the setup dialog
Tdialog mydialog=new({xlt("Modbus einstellungen")})
mydialog.icon="slider.ico"
mydialog.width=500
mydialog.height=130
mydialog.xpos=ScreenWidth()/2 -250
mydialog.ypos=ScreenHeight()/2 -65
-- set the app window as parent and set the buttons 
myApp.parent()

Tstatusbar status= new()
{}=create_thread(getports,{})
--Tdialog splash=new({"Modbus scanning Ports"})

myApp.parent()

Tbutton linkicons8=new({xlt("Suche mit Google nach ModBus ;-)")})
linkicons8.width=96
linkicons8.height=96
linkicons8.xpos=780
linkicons8.eventhandler(Click,icons8)

Ticonbutton verbindung=new()
verbindung.width=128
verbindung.height=128
verbindung.iconhandle=disconnected
verbindung.show()
verbindung.eventhandler(Click,showsetup)

Tgroup group_led =new({"LED's"})
group_led.parent()
group_led.xpos=150
group_led.ypos=0
group_led.width=480-220
group_led.height=275


Tbutton red_led=new({xlt("Led An")})
red_led.xpos=160-150
red_led.ypos=10+10
red_led.caption=xlt("Led An")
red_led.eventhandler(Click,toggle_led)

Tbutton green_led=new()
green_led.xpos=160-150
green_led.ypos=74+10
green_led.caption=xlt("Led An")
green_led.eventhandler(Click,toggle_led)

Tbutton blue_led=new()
blue_led.xpos=160-150
blue_led.ypos=138+10
blue_led.eventhandler(Click,toggle_led)
blue_led.caption=xlt("Led An")

Tbutton yellow_led=new()
yellow_led.xpos=160-150
yellow_led.ypos=202+10
yellow_led.caption=xlt("Led An")
yellow_led.eventhandler(Click,toggle_led)

Tbutton xred_led=new()
xred_led.xpos=320-150
xred_led.ypos=10+10
xred_led.caption=xlt("Led Aus")
xred_led.eventhandler(Click,toggle_led)

Tbutton xgreen_led=new()
xgreen_led.xpos=320-150
xgreen_led.ypos=74+10
xgreen_led.caption=xlt("Led Aus")
xgreen_led.eventhandler(Click,toggle_led)

Tbutton xblue_led=new()
xblue_led.xpos=320-150
xblue_led.ypos=138+10
xblue_led.caption=xlt("Led Aus")
xblue_led.eventhandler(Click,toggle_led)

Tbutton xyellow_led=new()
xyellow_led.xpos=320-150
xyellow_led.ypos=202+10
xyellow_led.caption=xlt("Led Aus")
xyellow_led.eventhandler(Click,toggle_led)

--Tpicture redled =new()
--redled.xpos=250-150
--redled.ypos=10
--redled.height=64
--redled.width=64
--redled.picturehandle=ledred

Ttogglepic redled =new()
redled.xpos=250-150
redled.ypos=10
redled.height=64
redled.width=64
redled.onpic=ledred
redled.offpic=ledoff
redled.on()
redled.off()

Ttogglepic  greenled =new()
greenled.xpos=250-150
greenled.ypos=74
greenled.height=64
greenled.width=64
greenled.onpic=ledgreen
greenled.offpic=ledoff

Ttogglepic  blueled =new()
blueled.xpos=250-150
blueled.ypos=138
blueled.height=64
blueled.width=64
blueled.onpic=ledblue
blueled.offpic=ledoff

Ttogglepic  yellowled =new()
yellowled.xpos=250-150
yellowled.ypos=202
yellowled.height=64
yellowled.width=64
yellowled.onpic=ledyellow
yellowled.offpic=ledoff

myApp.parent()
myApp.update()
group_led.update()

Tgroup group_analog =new({"Analog"})
group_analog.parent()
group_analog.xpos=160+260
group_analog.ypos=0
group_analog.width=480-140
group_analog.height=130

Tslider slider_pot=new({xlt("Potentiometer")})
slider_pot.ypos=25
slider_pot.width=330
slider_pot.height=40
slider_pot.min=0
slider_pot.max=1023
slider_pot.freq=100

Tlabel  pot_label=new({xlt("Potentiometer")})
pot_label.xpos=130
pot_label.ypos=10
pot_label.width=100


Tslider slider_ldr=new({xlt("Fotowiderstand")})
slider_ldr.ypos=85
slider_ldr.width=330
slider_ldr.height=40
slider_ldr.min=0
slider_ldr.max=1023
slider_ldr.freq=100

Tlabel  ldr_label=new({xlt("Fotowiderstand")})
ldr_label.xpos=130
ldr_label.ypos=70
ldr_label.width=100

group_analog.update()
myApp.parent()

Tgroup group_button =new({xlt("Buttons")})
group_button.parent()
group_button.xpos=160+260
group_button.ypos=130
group_button.width=480-140
group_button.height=145

Tpicture button1 = new()
button1.xpos=10
button1.ypos=50
button1.height=64
button1.width=148
button1.picturehandle=button_off

Tpicture button2 = new({"ghg"})
button2.xpos=180
button2.ypos=50
button2.height=64
button2.width=148
button2.picturehandle=button_off

myApp.update()

mydialog.parent()
Tgroup group_rtu =new({"RTU Parameter"})
group_rtu.xpos=5
group_rtu.ypos=5
group_rtu.width=280 --485
group_rtu.height=80

group_rtu.parent()
Tdropdown list_com =new()
list_com.xpos=5
list_com.ypos=40
list_com.add(comports)


Tdropdown list_slaves =new()
list_slaves.xpos=100
list_slaves.ypos=40
list_slaves.width=30
list_slaves.add({"1","2","3","4","5","6","7","8"})
list_slaves.eventhandler(RClick,setslave)

Tdropdown list_speed =new()
list_speed.xpos=194
list_speed.ypos=40
list_speed.add({"1200","2400","4800","9600","19200","38400","57600","115200"})


Tbutton button_com=new()
button_com.caption="Com Ports"
button_com.xpos=5
button_com.ypos=15
button_com.width=82
button_com.height=25
button_com.eventhandler(Click,getports)

Tbutton button_slaves=new()
button_slaves.caption="Slave Id"
button_slaves.xpos=100
button_slaves.ypos=15
button_slaves.width=82
button_slaves.height=25
button_slaves.eventhandler(Click,setslave)

Tbutton button_connect=new({xlt("Verbinden")})
button_connect.xpos=193
button_connect.ypos=15
button_connect.width=82
button_connect.height=25
button_connect.eventhandler(Click,start_connect)

Tedit edit_slaves = new({"1"})
edit_slaves.xpos=150
edit_slaves.ypos=40
edit_slaves.width=30
edit_slaves.height=22

mydialog.parent()
Tgroup error_group=new({xlt("Packete")})
error_group.xpos=290
error_group.ypos=5
error_group.height=80
error_group.width=190
error_group.update()

Tlabel transfer = new({xlt("Fehler:")})
transfer.xpos=295
transfer.width=180
transfer.left()
Ttimer PollTimer =new()
Ttimer DisplayTimer=new()
Ttimer UpdateTimer=new()
DisplayTimer.ticks=updateintervall
PollTimer.ticks=pollintervall
UpdateTimer.ticks=60000 -- 1 Minute
PollTimer.eventhandler(get_dataregister)
DisplayTimer.eventhandler(display_values)
UpdateTimer.eventhandler(update)
UpdateTimer.run()
myApp.run()

-- eventhandler procs
procedure showsetup()
    mydialog.show()
    mydialog.update()
--  group_led.show()
end procedure

procedure icons8()
object erg
    --erg=FindExe("x.html")
    erg=GetAssocExe(".html")
    RunApp(erg," https://google.com/search?q=all+about+arduino+modbus")
end procedure

procedure setslave()
        edit_slaves.text=list_slaves.item()
end procedure

--##########################################################################################
procedure start_connect()
object id,erg
if ACTIVE  then
    Void= modbus:Flush(ctx)
     modbus:Close(ctx)
     modbus:Free(ctx)
     --SetWinTimer(0,1)
     button_connect.caption=xlt("Verbinden")
     verbindung.iconhandle=disconnected
     status.caption=xlt("getrennt")
     ctx=0
     ACTIVE=False
--  tin:SetCheck(button_connect,False)
    PollTimer.stop()
    DisplayTimer.stop()
else
     --id=value(GetText(edit_slaves))
     id=get_integer(edit_slaves.handle)
     if equal(id,bullshit) then
        InfoMsg("\""&edit_slaves.text&"\""&xlt(" ist keine gültige Slave Id"),"Bullshit")
        edit_slaves.text="1"
        return     
     end if
     erg=value(list_speed.item())
     BitRate=erg[2]
     ctx=modbus:New_Rtu(list_com.item(),BitRate,'N',8,1)
     if ctx>0 then
         Void= modbus:Connect(ctx)
         Void= modbus:Set_Slave(ctx,id)
          --modbus:Set_Timeout(ctx,0,1000)
          --SetWinTimer(polltime,1)
          button_connect.caption=xlt("Trennen")
          verbindung.iconhandle=connected
          status.caption=(xlt("Verbunden ")&list_com.item()&" Slave :"&(edit_slaves.text))
          ACTIVE=True
          ErrCount=0
          PollTimer.run()
          DisplayTimer.run()
          get_dataregister()
          ErrCount=0
          ErrCountSum=0
          TotalCount=0
     else
       status.caption=(xlt("Verbindung fehlgeschlagen")&list_com.item()) 
     end if
end if
end procedure

--##########################################################################################
function get_integer(atom handle)
sequence text=GetText(handle)
object result
    result=to_number(text,-1)
    if result<0 then
        result=bullshit
    else
        result=to_integer(text)
    end if
    return result
end function

--##########################################################################################
procedure get_dataregister()
object data=repeat(0,10)
        data=Read_Registers16u(ctx,0,10)
            TotalCount+=1
        if equal(data,"Error") then
                ErrCount+=1
                ErrCountSum+=1
                data=0
                --?ErrCountSum
                if ErrCount>MaxErrCount then
                        start_connect()
                        if AskMsg(xlt("Verbindungsabbruch.\n Neu verbinden?"),xlt("Verbindungsfehler")&" "&sprintf("%d",ErrCountSum)) then
                                start_connect()
                        else
                                -- do nothing
                        end if
                ErrCount=0
                end if
                
        else
                TotalCount+=1
                
                ErrCount=0
        end if
        if not atom(data) then
            modregs=data
        end if

end procedure

--##########################################################################################
procedure display_values ()
if not sequence(modregs) then
modregs={1,2,3,4,5,6,7,8,9,0}
end if
--SetText(label_error,sprintf("%d",ErrCountSum)&"/"&sprintf("%d",TotalCount))
transfer.caption=xlt("Fehler :")&sprintf("%d",ErrCountSum)&xlt(" Gesamt :")&sprintf("%d",TotalCount)
--  if sequence(modregs) then
--      for i=1 to length(modregs) do
--          printf(1,"%d ",modregs[i])
--      end for
--  end if
--  puts(1,"\n")
slider_pot.pos=modregs[poti]
slider_ldr.pos=modregs[ldr]

if equal(modregs[butt1..yellow],modregs_old[butt1..yellow]) then
--  return -- keine änderung? Dann nix machen. Ansonsten --> Speicherleck mit STM_SETIMAGE???
end if

--if modregs[red] then
--  redled.picturehandle=ledred
--else
--  redled.picturehandle=ledoff 
--end if
if modregs[red] then
    redled.on()
else
    redled.off() 
end if
if modregs[green] then
    greenled.on()
else
    greenled.off()
end if
if modregs[blue] then
    blueled.on()
else
    blueled.off()
end if
if modregs[yellow] then
    yellowled.on()
else
    yellowled.off()
end if

if modregs[butt1] then
    button1.picturehandle=button_on
    else
    button1.picturehandle=button_off    
end if
if modregs[butt2] then
    button2.picturehandle=button_on
    else
    button2.picturehandle=button_off    
end if
modregs_old=modregs
end procedure

procedure goodbye()
    if ACTIVE then
        start_connect()
    end if
end procedure

procedure toggle_led()
PollTimer.stop()

if EventOwner=red_led.handle then
    modregs[red]=True
end if
if EventOwner=green_led.handle then
    modregs[green]=True
end if

if EventOwner=blue_led.handle then
    modregs[blue]=True
end if

if EventOwner=yellow_led.handle then
    modregs[yellow]=True
end if

if EventOwner=xred_led.handle then
    modregs[red]=False
end if

if EventOwner=xgreen_led.handle then
    modregs[green]=False
end if

if EventOwner=xblue_led.handle then
    modregs[blue]=False
end if

if EventOwner=xyellow_led.handle then
    modregs[yellow]=False
end if
Void=Write_Registers(ctx,red-1,modregs[red..yellow],4)
if ACTIVE then
PollTimer.run()
end if
end procedure

procedure update()
myApp.update()
mydialog.update()
group_led.update()
group_analog.update()
group_button.update()
error_group.update()
--?"ping"
end procedure

procedure getports()
status.caption=xlt("Suche Com Ports")
list_com.clear()
comports={"COM1:","COM2:","COM3:","COM4:",
                    "COM5:","COM6:","COM7:","COM8:","COM9:","COM10:","COM11:","COM12:","COM13:","COM14:","COM15:","COM16:","COM17:","COM18:","COM19:","COM20:"}
comports=Scan_Com_Ports()
if not(length(comports)) then
comports={"COM1:","COM2:","COM3:","COM4:",
                    "COM5:","COM6:","COM7:","COM8:","COM9:","COM10:","COM11:","COM12:","COM13:","COM14:","COM15:","COM16:","COM17:","COM18:","COM19:","COM20:"}
end if
list_com.add(comports)
status.caption=xlt("Suche Com Ports beendet")
--exit_thread(1)
end procedure
